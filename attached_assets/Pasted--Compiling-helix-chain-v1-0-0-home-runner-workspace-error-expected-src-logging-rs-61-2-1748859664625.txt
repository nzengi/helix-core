 Compiling helix-chain v1.0.0 (/home/runner/workspace)
error: expected `,`
  --> src/logging.rs:61:27
   |
61 |             block_height: metrics::counter!("block_height"),
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `metrics::counter` (in Nightly builds, run with -Z macro-backtrace for more info)

error: expected `,`
  --> src/logging.rs:62:32
   |
62 |             transaction_count: metrics::counter!("transaction_count"),
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `metrics::counter` (in Nightly builds, run with -Z macro-backtrace for more info)

error: expected `,`
  --> src/logging.rs:63:25
   |
63 |             peer_count: metrics::gauge!("peer_count"),
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `metrics::gauge` (in Nightly builds, run with -Z macro-backtrace for more info)

error: expected `,`
  --> src/logging.rs:64:25
   |
64 |             block_time: metrics::histogram!("block_time"),
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `metrics::histogram` (in Nightly builds, run with -Z macro-backtrace for more info)

error: expected `,`
  --> src/logging.rs:65:25
   |
65 |             shard_load: metrics::gauge!("shard_load"),
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `metrics::gauge` (in Nightly builds, run with -Z macro-backtrace for more info)

error: expected `,`
  --> src/logging.rs:66:30
   |
66 |             network_latency: metrics::histogram!("network_latency"),
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `metrics::histogram` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0255]: the name `Account` is defined multiple times
 --> src/genesis.rs:7:1
  |
4 | use crate::state::Account;
  |     --------------------- previous import of the type `Account` here
...
7 | pub struct Account {
  | ^^^^^^^^^^^^^^^^^^ `Account` redefined here
  |
  = note: `Account` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
  |
4 | use crate::state::Account as OtherAccount;
  |                           +++++++++++++++

error[E0255]: the name `KeyPair` is defined multiple times
   --> src/wallet.rs:331:1
    |
11  | use crate::crypto::{CryptoManager, KeyPair};
    |                                    ------- previous import of the type `KeyPair` here
...
331 | pub struct KeyPair {
    | ^^^^^^^^^^^^^^^^^^ `KeyPair` redefined here
    |
    = note: `KeyPair` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
    |
11  | use crate::crypto::{CryptoManager, KeyPair as OtherKeyPair};
    |                                            +++++++++++++++

error[E0432]: unresolved import `crate::state::ChainStatus`
  --> src/api.rs:15:29
   |
15 | use crate::state::{Account, ChainStatus};
   |                             ^^^^^^^^^^^
   |                             |
   |                             no `ChainStatus` in `state`
   |                             help: a similar name exists in the module: `ChainState`

warning: unused import: `DateTime`
 --> src/lib.rs:3:14
  |
3 | use chrono::{DateTime, Utc};
  |              ^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `Deserialize` and `Serialize`
 --> src/lib.rs:5:13
  |
5 | use serde::{Serialize, Deserialize};
  |             ^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `http::StatusCode`
 --> src/api.rs:8:5
  |
8 |     http::StatusCode,
  |     ^^^^^^^^^^^^^^^^

warning: unused import: `anyhow::Result`
  --> src/api.rs:11:5
   |
11 | use anyhow::Result;
   |     ^^^^^^^^^^^^^^

warning: unused import: `Instant`
 --> src/delegation.rs:6:27
  |
6 | use std::time::{Duration, Instant};
  |                           ^^^^^^^

warning: unused imports: `SystemTime` and `UNIX_EPOCH`
 --> src/gas.rs:1:17
  |
1 | use std::time::{SystemTime, UNIX_EPOCH};
  |                 ^^^^^^^^^^  ^^^^^^^^^^

warning: unused import: `crate::state::Account`
 --> src/genesis.rs:4:5
  |
4 | use crate::state::Account;
  |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `HashSet`
 --> src/governance.rs:5:33
  |
5 | use std::collections::{HashMap, HashSet};
  |                                 ^^^^^^^

warning: unused import: `Instant`
 --> src/governance.rs:6:27
  |
6 | use std::time::{Duration, Instant};
  |                           ^^^^^^^

warning: unused imports: `counter`, `gauge`, and `histogram`
  --> src/logging.rs:11:15
   |
11 | use metrics::{counter, gauge, histogram};
   |               ^^^^^^^  ^^^^^  ^^^^^^^^^

warning: unused import: `Instant`
 --> src/metrics.rs:6:27
  |
6 | use std::time::{Duration, Instant};
  |                           ^^^^^^^

warning: unused import: `tokio::time::sleep`
 --> src/metrics.rs:7:5
  |
7 | use tokio::time::sleep;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused imports: `AtomicF64` and `AtomicU64`
  --> src/metrics.rs:10:24
   |
10 | use prometheus::core::{AtomicF64, AtomicU64};
   |                        ^^^^^^^^^  ^^^^^^^^^

warning: unused import: `prometheus::proto::MetricFamily`
  --> src/metrics.rs:11:5
   |
11 | use prometheus::proto::MetricFamily;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `IpAddr`
 --> src/network.rs:3:16
  |
3 | use std::net::{IpAddr, SocketAddr};
  |                ^^^^^^

warning: unused import: `tokio::time`
 --> src/network.rs:6:5
  |
6 | use tokio::time;
  |     ^^^^^^^^^^^

warning: unused imports: `Block` and `Transaction`
 --> src/network.rs:8:24
  |
8 | use crate::consensus::{Block, Transaction};
  |                        ^^^^^  ^^^^^^^^^^^

warning: unused import: `Instant`
 --> src/oracle.rs:6:27
  |
6 | use std::time::{Duration, Instant};
  |                           ^^^^^^^

warning: unused import: `tokio::time::sleep`
 --> src/oracle.rs:8:5
  |
8 | use tokio::time::sleep;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused imports: `Duration` and `Instant`
 --> src/privacy.rs:6:17
  |
6 | use std::time::{Duration, Instant};
  |                 ^^^^^^^^  ^^^^^^^

warning: unused imports: `Identity`, `IsIdentity`, `RistrettoPoint`, and `constants::RISTRETTO_BASEPOINT_POINT`
  --> src/privacy.rs:10:5
   |
10 |     constants::RISTRETTO_BASEPOINT_POINT,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 |     ristretto::{RistrettoPoint, CompressedRistretto},
   |                 ^^^^^^^^^^^^^^
12 |     scalar::Scalar,
13 |     traits::{Identity, IsIdentity},
   |              ^^^^^^^^  ^^^^^^^^^^

warning: unused import: `SecretKey`
 --> src/security.rs:6:28
  |
6 | use secp256k1::{PublicKey, SecretKey, Message};
  |                            ^^^^^^^^^

warning: unused import: `secp256k1::ecdsa::Signature`
 --> src/security.rs:7:5
  |
7 | use secp256k1::ecdsa::Signature;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Instant`
 --> src/security_audit.rs:6:27
  |
6 | use std::time::{Duration, Instant};
  |                           ^^^^^^^

warning: unused import: `Keccak256`
 --> src/security_audit.rs:8:12
  |
8 | use sha3::{Keccak256, Digest};
  |            ^^^^^^^^^

warning: unused imports: `RngCore` and `rngs::OsRng`
 --> src/security_audit.rs:9:12
  |
9 | use rand::{rngs::OsRng, RngCore};
  |            ^^^^^^^^^^^  ^^^^^^^

warning: unused import: `Duration`
 --> src/smart_contract.rs:6:17
  |
6 | use std::time::{Duration, Instant};
  |                 ^^^^^^^^

warning: unused import: `Keccak256`
 --> src/state.rs:5:20
  |
5 | use sha3::{Digest, Keccak256};
  |                    ^^^^^^^^^

warning: unused import: `hex`
 --> src/state.rs:6:5
  |
6 | use hex;
  |     ^^^

warning: unused import: `Path`
 --> src/storage.rs:6:17
  |
6 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `Instant`
 --> src/storage.rs:7:27
  |
7 | use std::time::{Duration, Instant};
  |                           ^^^^^^^

warning: unused imports: `RngCore` and `rngs::OsRng`
  --> src/storage.rs:10:12
   |
10 | use rand::{rngs::OsRng, RngCore};
   |            ^^^^^^^^^^^  ^^^^^^^

warning: unused imports: `SystemExt` and `System`
 --> src/thermal.rs:1:15
  |
1 | use sysinfo::{System, SystemExt, ComponentExt};
  |               ^^^^^^  ^^^^^^^^^

warning: unused import: `std::sync::Arc`
 --> src/thermal.rs:2:5
  |
2 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^

warning: unused import: `tokio::sync::Mutex`
 --> src/thermal.rs:3:5
  |
3 | use tokio::sync::Mutex;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused imports: `Duration` and `Instant`
 --> src/token.rs:6:17
  |
6 | use std::time::{Duration, Instant};
  |                 ^^^^^^^^  ^^^^^^^

warning: unused import: `std::str::FromStr`
 --> src/token.rs:8:5
  |
8 | use std::str::FromStr;
  |     ^^^^^^^^^^^^^^^^^

warning: unused imports: `RngCore` and `rngs::OsRng`
 --> src/wallet.rs:7:12
  |
7 | use rand::{rngs::OsRng, RngCore};
  |            ^^^^^^^^^^^  ^^^^^^^

warning: unused import: `KeyPair`
  --> src/wallet.rs:11:36
   |
11 | use crate::crypto::{CryptoManager, KeyPair};
   |                                    ^^^^^^^

error[E0599]: no function or associated item named `new` found for struct `ConsensusState` in the current scope
  --> src/lib.rs:54:50
   |
54 |         let consensus = Arc::new(ConsensusState::new(
   |                                                  ^^^ function or associated item not found in `ConsensusState`
   |
  ::: src/consensus.rs:48:1
   |
48 | pub struct ConsensusState {
   | ------------------------- function or associated item `new` not found for this struct
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following traits define an item `new`, perhaps you need to implement one of them:
           candidate #1: `Atomic`
           candidate #2: `Bit`
           candidate #3: `Digest`
           candidate #4: `KeyInit`
           candidate #5: `KeyIvInit`
           candidate #6: `Mac`
           candidate #7: `SystemExt`
           candidate #8: `UniformSampler`
           candidate #9: `VariableOutput`
           candidate #10: `VariableOutputCore`
           candidate #11: `VartimePrecomputedMultiscalarMul`
           candidate #12: `ahash::HashMapExt`
           candidate #13: `ahash::HashSetExt`
           candidate #14: `curve25519_dalek_ng::traits::VartimePrecomputedMultiscalarMul`
           candidate #15: `digest::digest::Digest`
           candidate #16: `digest::variable::VariableOutput`
           candidate #17: `digest::variable::VariableOutputDirty`
           candidate #18: `parking_lot_core::thread_parker::ThreadParkerT`
           candidate #19: `protobuf::message::Message`
           candidate #20: `rand::distributions::uniform::UniformSampler`
           candidate #21: `ring::aead::BoundKey`

error[E0599]: no method named `start` found for struct `Arc<ConsensusState>` in the current scope
  --> src/lib.rs:77:24
   |
77 |         self.consensus.start().await?;
   |                        ^^^^^ method not found in `Arc<ConsensusState>`
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following traits define an item `start`, perhaps you need to implement one of them:
           candidate #1: `regex_syntax::ast::visitor::Visitor`
           candidate #2: `regex_syntax::ast::visitor::Visitor`
           candidate #3: `regex_syntax::hir::visitor::Visitor`
           candidate #4: `regex_syntax::hir::visitor::Visitor`

error[E0599]: no method named `stop` found for struct `Arc<ConsensusState>` in the current scope
  --> src/lib.rs:89:24
   |
89 |         self.consensus.stop().await?;
   |                        ^^^^ method not found in `Arc<ConsensusState>`

error[E0599]: no method named `get_status` found for struct `Arc<ChainState>` in the current scope
  --> src/api.rs:93:34
   |
93 |     match state.node.chain_state.get_status().await {
   |                                  ^^^^^^^^^^ method not found in `Arc<ChainState>`

warning: unused variable: `state`
   --> src/api.rs:103:11
    |
103 |     State(state): State<ApiState>,
    |           ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `pagination`
   --> src/api.rs:104:11
    |
104 |     Query(pagination): Query<PaginationQuery>,
    |           ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_pagination`

error[E0599]: no method named `get_block` found for struct `Arc<ChainState>` in the current scope
   --> src/api.rs:114:34
    |
114 |     match state.node.chain_state.get_block(&hash).await {
    |                                  ^^^^^^^^^
    |
help: there is a method `get_balance` with a similar name
    |
114 |     match state.node.chain_state.get_balance(&hash).await {
    |                                  ~~~~~~~~~~~

warning: unused variable: `state`
   --> src/api.rs:125:11
    |
125 |     State(state): State<ApiState>,
    |           ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

warning: unused variable: `pagination`
   --> src/api.rs:126:11
    |
126 |     Query(pagination): Query<PaginationQuery>,
    |           ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_pagination`

error[E0599]: no method named `get_transaction` found for struct `Arc<ChainState>` in the current scope
   --> src/api.rs:136:34
    |
136 |     match state.node.chain_state.get_transaction(&hash).await {
    |                                  ^^^^^^^^^^^^^^^
    |
help: there is a method `apply_transaction` with a similar name
    |
136 |     match state.node.chain_state.apply_transaction(&hash).await {
    |                                  ~~~~~~~~~~~~~~~~~

warning: unused variable: `state`
   --> src/api.rs:147:11
    |
147 |     State(state): State<ApiState>,
    |           ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

error[E0308]: mismatched types
   --> src/api.rs:173:52
    |
173 |         None => Json(ApiResponse::<Account>::error("Account not found")),
    |                      ----------------------------- ^^^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`
    |                      |                             |
    |                      |                             expected `String`, found `&str`
    |                      arguments to this function are incorrect
    |
note: associated function defined here
   --> src/api.rs:62:12
    |
62  |     pub fn error(message: String) -> Self {
    |            ^^^^^ ---------------

error[E0599]: no method named `get_account_balance` found for struct `Arc<ChainState>` in the current scope
   --> src/api.rs:181:34
    |
181 |     match state.node.chain_state.get_account_balance(&address).await {
    |                                  ^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `get_account` with a similar name
    |
181 |     match state.node.chain_state.get_account(&address).await {
    |                                  ~~~~~~~~~~~

warning: unused variable: `state`
   --> src/api.rs:190:31
    |
190 | ... fn get_validators(State(state): State<ApiState>) -> impl IntoRespon...
    |                             ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

error[E0609]: no field `consensus_manager` on type `Arc<HelixNode>`
   --> src/api.rs:208:32
    |
208 |     let consensus = state.node.consensus_manager.lock().await;
    |                                ^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `config`, `chain_state`, `consensus`, `crypto`, `network`, `is_running`

warning: unused variable: `state`
   --> src/api.rs:218:28
    |
218 | async fn get_metrics(State(state): State<ApiState>) -> impl IntoResponse {
    |                            ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

error[E0594]: cannot assign to `block.hash`, as `block` is not declared as mutable
   --> src/consensus.rs:136:9
    |
136 | ...   block.hash = crate::crypto::CryptoManager::hash_sha256(block_data...
    |       ^^^^^^^^^^ cannot assign
    |
help: consider changing this to be mutable
    |
122 |         let mut block = Block {
    |             +++

error[E0382]: use of moved value: `block.hash`
   --> src/consensus.rs:139:28
    |
122 |         let block = Block {
    |             ----- move occurs because `block` has type `consensus::Block`, which does not implement the `Copy` trait
...
138 |         let mut final_block = block;
    |                               ----- value moved here
139 |         final_block.hash = block.hash;
    |                            ^^^^^^^^^^ value used here after move

error[E0599]: no method named `get_pending_transactions` found for struct `Arc<ChainState>` in the current scope
   --> src/consensus.rs:170:40
    |
170 | ...   let pending = self.chain_state.get_pending_transactions().await.u...
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `add_pending_transaction` with a similar name, but with different arguments
   --> src/state.rs:162:5
    |
162 |     pub async fn add_pending_transaction(&self, transaction: Transaction) -> Result<(), StateError...
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> src/consensus.rs:211:54
    |
211 |             if self.chain_state.validate_transaction(&tx).await? {
    |                                 -------------------- ^^^ expected `state::Transaction`, found `Transaction`
    |                                 |
    |                                 arguments to this method are incorrect
    |
    = note: `Transaction` and `state::Transaction` have similar names, but are actually distinct types
note: `Transaction` is defined in module `crate::consensus` of the current crate
   --> src/consensus.rs:34:1
    |
34  | pub struct Transaction {
    | ^^^^^^^^^^^^^^^^^^^^^^
note: `state::Transaction` is defined in module `crate::state` of the current crate
   --> src/state.rs:34:1
    |
34  | pub struct Transaction {
    | ^^^^^^^^^^^^^^^^^^^^^^
note: method defined here
   --> src/state.rs:143:18
    |
143 | ...ync fn validate_transaction(&self, transaction: &Transaction) -> Res...
    |           ^^^^^^^^^^^^^^^^^^^^        -------------------------

error[E0599]: no method named `get_status` found for struct `Arc<ChainState>` in the current scope
   --> src/consensus.rs:267:39
    |
267 |         let status = self.chain_state.get_status().await?;
    |                                       ^^^^^^^^^^ method not found in `Arc<ChainState>`

error[E0599]: no method named `get_block` found for struct `Arc<ChainState>` in the current scope
   --> src/consensus.rs:269:47
    |
269 | ...   if let Some(block) = self.chain_state.get_block(&status.best_bloc...
    |                                             ^^^^^^^^^
    |
help: there is a method `get_balance` with a similar name
    |
269 |         if let Some(block) = self.chain_state.get_balance(&status.best_block_hash).await? {
    |                                               ~~~~~~~~~~~

error[E0599]: no method named `execute_transactions` found for struct `Arc<ChainState>` in the current scope
   --> src/consensus.rs:160:26
    |
160 |         self.chain_state.execute_transactions(&block.transactions).await?;
    |                          ^^^^^^^^^^^^^^^^^^^^ method not found in `Arc<ChainState>`

error[E0599]: no method named `add_block` found for struct `Arc<ChainState>` in the current scope
   --> src/consensus.rs:163:26
    |
163 |         self.chain_state.add_block(&block).await?;
    |                          ^^^^^^^^^ method not found in `Arc<ChainState>`

warning: unused variable: `no_votes`
   --> src/governance.rs:278:25
    |
278 |         let (yes_votes, no_votes, total_votes) = self.calculate_votes(p...
    |                         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_no_votes`

error[E0308]: mismatched types
   --> src/governance.rs:242:48
    |
242 |                 self.spend_treasury(recipient, amount, purpose).await?;
    |                      --------------            ^^^^^^ expected `u128`, found `&u128`
    |                      |
    |                      arguments to this method are incorrect
    |
note: method defined here
   --> src/governance.rs:345:14
    |
345 |     async fn spend_treasury(
    |              ^^^^^^^^^^^^^^
...
348 |         amount: u128,
    |         ------------
help: consider dereferencing the borrow
    |
242 |                 self.spend_treasury(recipient, *amount, purpose).await?;
    |                                                +

warning: unused variable: `contract_address`
   --> src/governance.rs:319:9
    |
319 |         contract_address: &str,
    |         ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_contract_address`

warning: unused variable: `new_version`
   --> src/governance.rs:320:9
    |
320 |         new_version: &str,
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_version`

warning: unused variable: `upgrade_data`
   --> src/governance.rs:321:9
    |
321 |         upgrade_data: &[u8],
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_upgrade_data`

warning: unused variable: `action_type`
   --> src/governance.rs:329:9
    |
329 |         action_type: &str,
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_action_type`

warning: unused variable: `action_data`
   --> src/governance.rs:330:9
    |
330 |         action_data: &[u8],
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_action_data`

warning: unused variable: `validators`
   --> src/governance.rs:338:9
    |
338 |         validators: &[String],
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_validators`

warning: unused variable: `powers`
   --> src/governance.rs:339:9
    |
339 |         powers: &[u64],
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_powers`

warning: unused variable: `recipient`
   --> src/governance.rs:347:9
    |
347 |         recipient: &str,
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_recipient`

warning: unused variable: `amount`
   --> src/governance.rs:348:9
    |
348 |         amount: u128,
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_amount`

warning: unused variable: `purpose`
   --> src/governance.rs:349:9
    |
349 |         purpose: &str,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_purpose`

error[E0308]: mismatched types
   --> src/metrics.rs:138:21
    |
138 |                     prometheus::opts!(&config.name, &config.description)
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `HistogramOpts`, found `Opts`
    |
    = note: this error originates in the macro `prometheus::opts` (in Nightly builds, run with -Z macro-backtrace for more info)
help: call `Into::into` on this expression to convert `Opts` into `HistogramOpts`
    |
138 |                     prometheus::opts!(&config.name, &config.description).into()
    |                                                                         +++++++

error[E0308]: mismatched types
   --> src/metrics.rs:169:52
    |
169 | ... > config.retention_period {
    |       ^^^^^^^^^^^^^^^^^^^^^^^ expected `TimeDelta`, found `Duration`

warning: unused variable: `duration`
   --> src/metrics.rs:244:84
    |
244 | ...eshold, duration } = &alert.condition {
    |            ^^^^^^^^ help: try ignoring the field: `duration: _`

warning: unused variable: `connection`
   --> src/network.rs:190:21
    |
190 |         if let Some(connection) = self.active_connections.remove(addres...
    |                     ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_connection`

warning: unused variable: `peer`
   --> src/network.rs:131:46
    |
131 | ...d_message_to_peer(&self, peer: &PeerInfo, message: &[u8]) -> Result<...
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_peer`

warning: unused variable: `message`
   --> src/network.rs:131:63
    |
131 | ...(&self, peer: &PeerInfo, message: &[u8]) -> Result<(), String> {
    |                             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_message`

error[E0599]: no method named `lock` found for struct `Arc<RwLock<HashMap<String, Peer>>>` in the current scope
   --> src/network_manager.rs:168:20
    |
168 |         self.peers.lock().await.remove(peer_id);
    |                    ^^^^ method not found in `Arc<RwLock<HashMap<String, Peer>>>`
    |
    = note: the full type name has been written to '/home/runner/workspace/target/debug/deps/helix_chain-0f9ccbd85c8c6865.long-type-7660594240046779989.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0599]: no method named `lock` found for struct `Arc<RwLock<HashMap<String, Peer>>>` in the current scope
   --> src/network_manager.rs:173:20
    |
173 |         self.peers.lock().await.len()
    |                    ^^^^ method not found in `Arc<RwLock<HashMap<String, Peer>>>`
    |
    = note: the full type name has been written to '/home/runner/workspace/target/debug/deps/helix_chain-0f9ccbd85c8c6865.long-type-7660594240046779989.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0599]: no method named `lock` found for struct `Arc<RwLock<HashMap<String, Peer>>>` in the current scope
   --> src/network_manager.rs:177:20
    |
177 |         self.peers.lock().await.keys().cloned().collect()
    |                    ^^^^ method not found in `Arc<RwLock<HashMap<String, Peer>>>`
    |
    = note: the full type name has been written to '/home/runner/workspace/target/debug/deps/helix_chain-0f9ccbd85c8c6865.long-type-7660594240046779989.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0308]: mismatched types
   --> src/network_manager.rs:231:52
    |
231 | ...  self.send_message_to_peer(peer_id, NetworkMessage::Pong).await?;
    |           --------------------          ^^^^^^^^^^^^^^^^^^^^ expected `&NetworkMessage`, found `NetworkMessage`
    |           |
    |           arguments to this method are incorrect
    |
note: method defined here
   --> src/network_manager.rs:119:14
    |
119 | ...fn send_message_to_peer(&self, peer_id: &str, message: &NetworkMessage) -...
    |       ^^^^^^^^^^^^^^^^^^^^                       ------------------------
help: consider borrowing here
    |
231 |                 self.send_message_to_peer(peer_id, &NetworkMessage::Pong).await?;
    |                                                    +

error[E0308]: mismatched types
   --> src/network_manager.rs:307:47
    |
307 |                 self.handle_message(&peer_id, &message).await?;
    |                      --------------           ^^^^^^^^ expected `NetworkMessage`, found `&NetworkMessage`
    |                      |
    |                      arguments to this method are incorrect
    |
note: method defined here
   --> src/network_manager.rs:125:18
    |
125 | ...fn handle_message(&self, peer_id: &str, message: NetworkMessage) -> ...
    |       ^^^^^^^^^^^^^^                       -----------------------
help: consider removing the borrow
    |
307 -                 self.handle_message(&peer_id, &message).await?;
307 +                 self.handle_message(&peer_id, message).await?;
    |

error[E0533]: expected unit struct, unit variant or constant, found struct variant `NetworkMessage::SyncRequest`
   --> src/network_manager.rs:327:13
    |
327 |             NetworkMessage::SyncRequest => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a unit struct, unit variant or constant
    |
help: the struct variant's field is being ignored
    |
327 |             NetworkMessage::SyncRequest { from_height: _ } => {
    |                                         ++++++++++++++++++

error[E0277]: the trait bound `http::HeaderMap: TryFrom<HashMap<std::string::String, std::string::String>>` is not satisfied
   --> src/oracle.rs:241:45
    |
241 | ...e.headers.clone().try_into().map_err(|e| OracleError::HttpError(form...
    |                      ^^^^^^^^ unsatisfied trait bound
    |
    = help: the trait `From<HashMap<std::string::String, std::string::String>>` is not implemented for `http::HeaderMap`
    = note: required for `HashMap<std::string::String, std::string::String>` to implement `Into<http::HeaderMap>`
    = note: required for `http::HeaderMap` to implement `TryFrom<HashMap<std::string::String, std::string::String>>`
    = note: required for `HashMap<std::string::String, std::string::String>` to implement `TryInto<http::HeaderMap>`

warning: unused variable: `request_id`
   --> src/oracle.rs:298:43
    |
298 | ...vrf_calculation(&self, request_id: u64, seed: [u8; 32]) -> Result<()...
    |                           ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_request_id`

warning: unused variable: `seed`
   --> src/oracle.rs:298:60
    |
298 | ...(&self, request_id: u64, seed: [u8; 32]) -> Result<(), OracleError> {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_seed`

warning: unused variable: `metric`
   --> src/security_audit.rs:245:48
    |
245 | ...teLimit { metric, threshold, window } => {
    |              ^^^^^^ help: try ignoring the field: `metric: _`

warning: unused variable: `threshold`
   --> src/security_audit.rs:245:56
    |
245 | ...etric, threshold, window } => {
    |           ^^^^^^^^^ help: try ignoring the field: `threshold: _`

warning: unused variable: `window`
   --> src/security_audit.rs:245:67
    |
245 | ...hreshold, window } => {
    |              ^^^^^^ help: try ignoring the field: `window: _`

warning: unused variable: `condition`
   --> src/security_audit.rs:253:45
    |
253 |             SecurityRuleCondition::Custom { condition } => {
    |                                             ^^^^^^^^^ help: try ignoring the field: `condition: _`

warning: unused variable: `action`
   --> src/security_audit.rs:282:42
    |
282 |             SecurityRuleAction::Custom { action } => {
    |                                          ^^^^^^ help: try ignoring the field: `action: _`

warning: unused variable: `shard`
   --> src/sharding.rs:137:53
    |
137 | ...te(&self, shard_id: u32, shard: &Shard) -> Result<(), String> {
    |                             ^^^^^ help: if this is intentional, prefix it with an underscore: `_shard`

error[E0599]: no method named `is_ok` found for struct `Vec<u8>` in the current scope
   --> src/smart_contract.rs:109:29
    |
109 |             success: result.is_ok(),
    |                             ^^^^^ method not found in `Vec<u8>`

error[E0599]: no method named `unwrap_or_default` found for struct `Vec<u8>` in the current scope
   --> src/smart_contract.rs:110:33
    |
110 |             return_data: result.unwrap_or_default(),
    |                                 ^^^^^^^^^^^^^^^^^ method not found in `Vec<u8>`

error[E0599]: no method named `err` found for struct `Vec<u8>` in the current scope
   --> src/smart_contract.rs:112:27
    |
112 |             error: result.err().map(|e| e.to_string()),
    |                           ^^^ method not found in `Vec<u8>`

warning: unused variable: `base_address`
  --> src/wallet.rs:91:38
   |
91 | ...ecret_key, public_key, base_address) = self.address_generator.generat...
   |                           ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_base_address`

warning: use of deprecated associated function `secp256k1::Message::from_slice`: use from_digest_slice instead
   --> src/wallet.rs:165:32
    |
165 |         let message = Message::from_slice(&tx_hash)?;
    |                                ^^^^^^^^^^
    |
    = note: `#[warn(deprecated)]` on by default

error[E0592]: duplicate definitions with name `broadcast_message`
   --> src/network_manager.rs:190:5
    |
105 |     pub async fn broadcast_message(&self, message: NetworkMessage) -> Result<()...
    |     ---------------------------------------------------------------------------- other definition for `broadcast_message`
...
190 |     pub async fn broadcast_message(&self, message: NetworkMessage) -> Result<()...
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `broadcast_message`

error[E0592]: duplicate definitions with name `send_message_to_peer`
   --> src/network_manager.rs:203:5
    |
119 |     async fn send_message_to_peer(&self, peer_id: &str, message: &NetworkMessage) -> Result<()> {
    |     ------------------------------------------------------------------------------------------- other definition for `send_message_to_peer`
...
203 |     pub async fn send_message_to_peer(&self, peer_id: &str, message: NetworkMessage) -> Result<()...
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `send_message_to_peer`

error[E0592]: duplicate definitions with name `start_peer_discovery`
   --> src/network_manager.rs:260:5
    |
80  |     async fn start_peer_discovery(&self) -> Result<()> {
    |     -------------------------------------------------- other definition for `start_peer_discovery`
...
260 |     async fn start_peer_discovery(&self) -> Result<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `start_peer_discovery`

error[E0592]: duplicate definitions with name `get_connected_peers`
   --> src/network_manager.rs:273:5
    |
176 |     pub async fn get_connected_peers(&self) -> Vec<String> {
    |     ------------------------------------------------------ other definition for `get_connected_peers`
...
273 |     pub async fn get_connected_peers(&self) -> Result<Vec<Peer>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `get_connected_peers`

error[E0592]: duplicate definitions with name `handle_message`
   --> src/network_manager.rs:313:5
    |
125 |     pub async fn handle_message(&self, peer_id: &str, message: NetworkMessage) -> Result<()...
    |     ---------------------------------------------------------------------------------------- other definition for `handle_message`
...
313 |     async fn handle_message(&self, peer_id: &str, message: &NetworkMessage) -> Result<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `handle_message`

error[E0308]: mismatched types
   --> src/consensus.rs:262:58
    |
262 |         let merkle_tree = crate::crypto::MerkleTree::new(tx_hashes);
    |                           ------------------------------ ^^^^^^^^^ expected `Vec<Vec<u8>>`, found `Vec<String>`
    |                           |
    |                           arguments to this function are incorrect
    |
    = note: expected struct `Vec<Vec<u8>>`
               found struct `Vec<std::string::String>`
note: associated function defined here
   --> src/crypto.rs:184:12
    |
184 |     pub fn new(data: Vec<Vec<u8>>) -> Self {
    |            ^^^ ------------------

error[E0277]: `Metrics` doesn't implement `std::fmt::Debug`
  --> src/logging.rs:18:5
   |
15 | #[derive(Clone, Debug)]
   |                 ----- in this derive macro expansion
...
18 |     metrics: Arc<Metrics>,
   |     ^^^^^^^^^^^^^^^^^^^^^ `Metrics` cannot be formatted using `{:?}`
   |
   = help: the trait `std::fmt::Debug` is not implemented for `Metrics`
   = note: add `#[derive(Debug)]` to `Metrics` or manually `impl std::fmt::Debug for Metrics`
   = help: the trait `std::fmt::Debug` is implemented for `Arc<T, A>`
   = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0063]: missing fields `fee` and `id` in initializer of `state::Transaction`
   --> src/network_manager.rs:350:32
    |
350 |                 let state_tx = crate::state::Transaction {
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^ missing `fee` and `id`

error[E0599]: no function or associated item named `default` found for struct `RangeProof` in the current scope
   --> src/privacy.rs:300:24
    |
300 |         Ok(RangeProof::default()) // TODO: Implement range proof creation
    |                        ^^^^^^^ function or associated item not found in `RangeProof`
    |
note: if you're trying to build a new `RangeProof`, consider using `RangeProof::from_bytes` which returns `Result<RangeProof, ProofError>`
   --> /home/runner/workspace/.local/share/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bulletproofs-4.0.0/src/range_proof/mod.rs:504:5
    |
504 |     pub fn from_bytes(slice: &[u8]) -> Result<RangeProof, ProofError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the trait bound `SecretKey: Serialize` is not satisfied
    --> src/wallet.rs:14:24
     |
14   | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ the trait `Serialize` is not implemented for `SecretKey`
...
17   |     pub private_key: SecretKey,
     |     --- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `SecretKey` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 385 others
note: required by a bound in `address::_::_serde::ser::SerializeStruct::serialize_field`
    --> /home/runner/workspace/.local/share/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> ...
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `secp256k1::PublicKey: Serialize` is not satisfied
    --> src/wallet.rs:14:24
     |
14   | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ the trait `Serialize` is not implemented for `secp256k1::PublicKey`
...
18   |     pub public_key: PublicKey,
     |     --- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `secp256k1::PublicKey` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 385 others
note: required by a bound in `address::_::_serde::ser::SerializeStruct::serialize_field`
    --> /home/runner/workspace/.local/share/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> ...
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `SecretKey: Deserialize<'_>` is not satisfied
    --> src/wallet.rs:17:22
     |
17   |     pub private_key: SecretKey,
     |                      ^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `SecretKey`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `SecretKey` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a [u8]
               &'a serde_json::value::RawValue
               &'a std::path::Path
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
             and 393 others
note: required by a bound in `next_element`
    --> /home/runner/workspace/.local/share/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `secp256k1::PublicKey: Deserialize<'_>` is not satisfied
    --> src/wallet.rs:18:21
     |
18   |     pub public_key: PublicKey,
     |                     ^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `secp256k1::PublicKey`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `secp256k1::PublicKey` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a [u8]
               &'a serde_json::value::RawValue
               &'a std::path::Path
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
             and 393 others
note: required by a bound in `next_element`
    --> /home/runner/workspace/.local/share/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `SecretKey: Deserialize<'_>` is not satisfied
    --> src/wallet.rs:17:22
     |
17   |     pub private_key: SecretKey,
     |                      ^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `SecretKey`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `SecretKey` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a [u8]
               &'a serde_json::value::RawValue
               &'a std::path::Path
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
             and 393 others
note: required by a bound in `next_value`
    --> /home/runner/workspace/.local/share/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `secp256k1::PublicKey: Deserialize<'_>` is not satisfied
    --> src/wallet.rs:18:21
     |
18   |     pub public_key: PublicKey,
     |                     ^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `secp256k1::PublicKey`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `secp256k1::PublicKey` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a [u8]
               &'a serde_json::value::RawValue
               &'a std::path::Path
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
             and 393 others
note: required by a bound in `next_value`
    --> /home/runner/workspace/.local/share/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `SecretKey: Deserialize<'_>` is not satisfied
  --> src/wallet.rs:14:35
   |
14 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `SecretKey`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `SecretKey` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `Deserialize<'de>`:
             &'a [u8]
             &'a serde_json::value::RawValue
             &'a std::path::Path
             &'a str
             ()
             (T,)
             (T0, T1)
             (T0, T1, T2)
           and 393 others
note: required by a bound in `address::_::_serde::__private::de::missing_field`
  --> /home/runner/workspace/.local/share/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `secp256k1::PublicKey: Deserialize<'_>` is not satisfied
  --> src/wallet.rs:14:35
   |
14 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `secp256k1::PublicKey`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `secp256k1::PublicKey` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `Deserialize<'de>`:
             &'a [u8]
             &'a serde_json::value::RawValue
             &'a std::path::Path
             &'a str
             ()
             (T,)
             (T0, T1)
             (T0, T1, T2)
           and 393 others
note: required by a bound in `address::_::_serde::__private::de::missing_field`
  --> /home/runner/workspace/.local/share/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `[u8; 33]: Serialize` is not satisfied
    --> src/wallet.rs:345:45
     |
345  | ...te.serialize_field("public_key", &self.public_key.serialize())?;
     |       ---------------               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Serialize` is not implemented for `[u8; 33]`
     |       |
     |       required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `[u8; 33]` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               [T; 0]
               [T; 10]
               [T; 11]
               [T; 12]
               [T; 13]
               [T; 14]
               [T; 15]
               [T; 16]
             and 26 others
note: required by a bound in `address::_::_serde::ser::SerializeStruct::serialize_field`
    --> /home/runner/workspace/.local/share/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> ...
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`

error[E0277]: the trait bound `[u8; 33]: Deserialize<'de>` is not satisfied
    --> src/wallet.rs:388:57
     |
388  | ...                   public_key_bytes = Some(map.next_value()?);
     |                                                   ^^^^^^^^^^ the trait `Deserialize<'de>` is not implemented for `[u8; 33]`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `[u8; 33]` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &[u8]
               [T; 0]
               [T; 10]
               [T; 11]
               [T; 12]
               [T; 13]
               [T; 14]
               [T; 15]
             and 26 others
note: required by a bound in `next_value`
    --> /home/runner/workspace/.local/share/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: `NetworkManager` doesn't implement `std::fmt::Debug`
  --> src/lib.rs:46:5
   |
40 | #[derive(Debug, Clone)]
   |          ----- in this derive macro expansion
...
46 |     pub network: Arc<NetworkManager>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `NetworkManager` cannot be formatted using `{:?}`
   |
   = help: the trait `std::fmt::Debug` is not implemented for `NetworkManager`
   = note: add `#[derive(Debug)]` to `NetworkManager` or manually `impl std::fmt::Debug for NetworkManager`
   = help: the trait `std::fmt::Debug` is implemented for `Arc<T, A>`
   = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused import: `Digest`
 --> src/security_audit.rs:8:23
  |
8 | use sha3::{Keccak256, Digest};
  |                       ^^^^^^

warning: unused import: `Digest`
 --> src/state.rs:5:12
  |
5 | use sha3::{Digest, Keccak256};
  |            ^^^^^^

warning: unused import: `futures::StreamExt`
  --> src/storage.rs:13:5
   |
13 | use futures::StreamExt;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `ComponentExt`
 --> src/thermal.rs:1:34
  |
1 | use sysinfo::{System, SystemExt, ComponentExt};
  |                                  ^^^^^^^^^^^^

warning: unused import: `Deserializer`
   --> src/wallet.rs:356:31
    |
356 |         use serde::de::{self, Deserializer, MapAccess, Visitor};
    |                               ^^^^^^^^^^^^

warning: unused variable: `stake`
   --> src/address.rs:233:58
    |
233 | ...(&self, beta_angle: f64, stake: u64) -> Result<(GearParameters, Addr...
    |                             ^^^^^ help: if this is intentional, prefix it with an underscore: `_stake`

warning: unused variable: `epoch`
   --> src/delegation.rs:294:39
    |
294 |     fn calculate_epoch_rewards(&self, epoch: u64) -> u128 {
    |                                       ^^^^^ help: if this is intentional, prefix it with an underscore: `_epoch`

warning: unused variable: `height`
  --> src/logging.rs:99:32
   |
99 |     pub fn record_block(&self, height: u64, time_ms: f64) {
   |                                ^^^^^^ help: if this is intentional, prefix it with an underscore: `_height`

warning: unused variable: `proof`
   --> src/oracle.rs:303:32
    |
303 | ... verify_vrf_proof(&self, proof: &[u8], seed: &[u8; 32]) -> Result<()...
    |                             ^^^^^ help: if this is intentional, prefix it with an underscore: `_proof`

warning: unused variable: `seed`
   --> src/oracle.rs:303:46
    |
303 | ...oof(&self, proof: &[u8], seed: &[u8; 32]) -> Result<(), OracleError> {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_seed`

warning: unused variable: `words`
   --> src/oracle.rs:308:35
    |
308 | ...rify_random_words(&self, words: &[[u8; 32]], proof: &[u8]) -> Result...
    |                             ^^^^^ help: if this is intentional, prefix it with an underscore: `_words`

warning: unused variable: `proof`
   --> src/oracle.rs:308:55
    |
308 | ...elf, words: &[[u8; 32]], proof: &[u8]) -> Result<(), OracleError> {
    |                             ^^^^^ help: if this is intentional, prefix it with an underscore: `_proof`

warning: unused variable: `signature`
   --> src/oracle.rs:313:32
    |
313 | ...erify_signature(&self, signature: &str, data: &[[u8; 32]]) -> Result...
    |                           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_signature`

warning: unused variable: `data`
   --> src/oracle.rs:313:49
    |
313 | ...(&self, signature: &str, data: &[[u8; 32]]) -> Result<(), OracleErro...
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_data`

warning: unused variable: `key_image`
   --> src/privacy.rs:267:9
    |
267 |         key_image: &CompressedRistretto,
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_key_image`

warning: unused variable: `public_keys`
   --> src/privacy.rs:268:9
    |
268 |         public_keys: &[CompressedRistretto],
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_public_keys`

warning: unused variable: `transcript`
   --> src/privacy.rs:276:9
    |
276 |         transcript: &mut Transcript,
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_transcript`

warning: unused variable: `message`
   --> src/privacy.rs:277:9
    |
277 |         message: &[u8],
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_message`

warning: unused variable: `private_key`
   --> src/privacy.rs:278:9
    |
278 |         private_key: &Scalar,
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_private_key`

warning: unused variable: `public_keys`
   --> src/privacy.rs:279:9
    |
279 |         public_keys: &[CompressedRistretto],
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_public_keys`

warning: unused variable: `key_image`
   --> src/privacy.rs:280:9
    |
280 |         key_image: &CompressedRistretto,
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_key_image`

warning: unused variable: `rng`
   --> src/privacy.rs:281:9
    |
281 |         rng: &mut OsRng,
    |         ^^^ help: if this is intentional, prefix it with an underscore: `_rng`

warning: unused variable: `signature`
   --> src/privacy.rs:287:37
    |
287 | ..._ring_signature(&self, signature: &RingSignature) -> Result<bool, Pr...
    |                           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_signature`

warning: unused variable: `transcript`
   --> src/privacy.rs:305:9
    |
305 |         transcript: &mut Transcript,
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_transcript`

warning: unused variable: `proof`
   --> src/privacy.rs:306:9
    |
306 |         proof: &RangeProof,
    |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_proof`

warning: unused variable: `commitment`
   --> src/privacy.rs:307:9
    |
307 |         commitment: &CompressedRistretto,
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_commitment`

warning: unused variable: `transcript`
   --> src/privacy.rs:315:9
    |
315 |         transcript: &mut Transcript,
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_transcript`

warning: unused variable: `statement`
   --> src/privacy.rs:316:9
    |
316 |         statement: &[u8],
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_statement`

warning: unused variable: `witness`
   --> src/privacy.rs:317:9
    |
317 |         witness: &[u8],
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_witness`

warning: unused variable: `public_inputs`
   --> src/privacy.rs:318:9
    |
318 |         public_inputs: &[Vec<u8>],
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_public_inputs`

warning: unused variable: `rng`
   --> src/privacy.rs:319:9
    |
319 |         rng: &mut OsRng,
    |         ^^^ help: if this is intentional, prefix it with an underscore: `_rng`

warning: unused variable: `proof`
   --> src/privacy.rs:325:31
    |
325 | ...n verify_zk_proof(&self, proof: &ZeroKnowledgeProof) -> Result<bool,...
    |                             ^^^^^ help: if this is intentional, prefix it with an underscore: `_proof`

warning: unused variable: `nullifier`
   --> src/privacy.rs:330:32
    |
330 | ...erify_nullifier(&self, nullifier: &[u8]) -> Result<bool, PrivacyErro...
    |                           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_nullifier`

warning: unused variable: `public_key`
   --> src/security.rs:196:13
    |
196 |         let public_key = match self.public_keys.get(&transaction.from) {
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_public_key`

warning: unused variable: `message`
   --> src/security.rs:204:13
    |
204 |         let message = Message::from_digest_slice(&message_hash).map_err...
    |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_message`

warning: unused variable: `merkle_root`
   --> src/security.rs:231:13
    |
231 |         let merkle_root = match self.merkle_roots.get(&transaction.from) {
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_merkle_root`

warning: unused variable: `shard_id`
   --> src/sharding.rs:196:30
    |
196 |     fn get_shard_info(&self, shard_id: u32) -> Option<Shard> {
    |                              ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_shard_id`

warning: unused variable: `shard_id`
   --> src/sharding.rs:201:38
    |
201 | ...shard_state(&mut self, shard_id: u32, new_state: String) -> Result<(...
    |                           ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_shard_id`

warning: unused variable: `new_state`
   --> src/sharding.rs:201:53
    |
201 | ...t self, shard_id: u32, new_state: String) -> Result<(), String> {
    |                           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_state`

warning: unused variable: `transaction`
   --> src/sharding.rs:206:48
    |
206 | ...ard_transaction(&self, transaction: &Transaction) -> bool {
    |                           ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_transaction`

Some errors have detailed explanations: E0063, E0255, E0277, E0308, E0382, E0432, E0533, E0592, E0594...
For more information about an error, try `rustc --explain E0063`.
warning: `helix-chain` (lib) generated 111 warnings
error: could not compile `helix-chain` (lib) due to 59 previous errors; 111 warnings emitted
