Compiling helix-chain v1.0.0 (/home/runner/workspace)
error[E0428]: the name `InvalidData` is defined multiple times
   --> src/oracle.rs:361:5
    |
343 |     InvalidData,
    |     ----------- previous definition of the type `InvalidData` here
...
361 |     InvalidData,
    |     ^^^^^^^^^^^ `InvalidData` redefined here
    |
    = note: `InvalidData` must be defined only once in the type namespace of this enum

error[E0428]: the name `Timeout` is defined multiple times
   --> src/oracle.rs:363:5
    |
355 |     Timeout,
    |     ------- previous definition of the type `Timeout` here
...
363 |     Timeout,
    |     ^^^^^^^ `Timeout` redefined here
    |
    = note: `Timeout` must be defined only once in the type namespace of this enum

error[E0428]: the name `NetworkError` is defined multiple times
   --> src/oracle.rs:375:5
    |
349 |     NetworkError(reqwest::Error),
    |     ---------------------------- previous definition of the type `NetworkError` here
...
375 |     NetworkError(String),
    |     ^^^^^^^^^^^^^^^^^^^^ `NetworkError` redefined here
    |
    = note: `NetworkError` must be defined only once in the type namespace of this enum

error[E0428]: the name `InvalidData` is defined multiple times
   --> src/oracle.rs:377:5
    |
343 |     InvalidData,
    |     ----------- previous definition of the type `InvalidData` here
...
377 |     InvalidData,
    |     ^^^^^^^^^^^ `InvalidData` redefined here
    |
    = note: `InvalidData` must be defined only once in the type namespace of this enum

error[E0428]: the name `DataError` is defined multiple times
   --> src/oracle.rs:379:5
    |
359 |     DataError(String),
    |     ----------------- previous definition of the type `DataError` here
...
379 |     DataError(String),
    |     ^^^^^^^^^^^^^^^^^ `DataError` redefined here
    |
    = note: `DataError` must be defined only once in the type namespace of this enum

error[E0428]: the name `Timeout` is defined multiple times
   --> src/oracle.rs:381:5
    |
355 |     Timeout,
    |     ------- previous definition of the type `Timeout` here
...
381 |     Timeout,
    |     ^^^^^^^ `Timeout` redefined here
    |
    = note: `Timeout` must be defined only once in the type namespace of this enum

error[E0428]: the name `Unauthorized` is defined multiple times
   --> src/oracle.rs:383:5
    |
365 |     Unauthorized,
    |     ------------ previous definition of the type `Unauthorized` here
...
383 |     Unauthorized,
    |     ^^^^^^^^^^^^ `Unauthorized` redefined here
    |
    = note: `Unauthorized` must be defined only once in the type namespace of this enum

error[E0428]: the name `RateLimitExceeded` is defined multiple times
   --> src/oracle.rs:385:5
    |
367 |     RateLimitExceeded,
    |     ----------------- previous definition of the type `RateLimitExceeded` here
...
385 |     RateLimitExceeded,
    |     ^^^^^^^^^^^^^^^^^ `RateLimitExceeded` redefined here
    |
    = note: `RateLimitExceeded` must be defined only once in the type namespace of this enum

error[E0428]: the name `ServiceUnavailable` is defined multiple times
   --> src/oracle.rs:387:5
    |
369 |     ServiceUnavailable,
    |     ------------------ previous definition of the type `ServiceUnavailable` here
...
387 |     ServiceUnavailable,
    |     ^^^^^^^^^^^^^^^^^^ `ServiceUnavailable` redefined here
    |
    = note: `ServiceUnavailable` must be defined only once in the type namespace of this enum

error[E0428]: the name `InvalidSignature` is defined multiple times
   --> src/oracle.rs:389:5
    |
371 |     InvalidSignature,
    |     ---------------- previous definition of the type `InvalidSignature` here
...
389 |     InvalidSignature,
    |     ^^^^^^^^^^^^^^^^ `InvalidSignature` redefined here
    |
    = note: `InvalidSignature` must be defined only once in the type namespace of this enum

error[E0428]: the name `VrfVerificationFailed` is defined multiple times
   --> src/oracle.rs:391:5
    |
373 |     VrfVerificationFailed,
    |     --------------------- previous definition of the type `VrfVerificationFailed` here
...
391 |     VrfVerificationFailed,
    |     ^^^^^^^^^^^^^^^^^^^^^ `VrfVerificationFailed` redefined here
    |
    = note: `VrfVerificationFailed` must be defined only once in the type namespace of this enum

error[E0255]: the name `Account` is defined multiple times
 --> src/genesis.rs:7:1
  |
4 | use crate::state::Account;
  |     --------------------- previous import of the type `Account` here
...
7 | pub struct Account {
  | ^^^^^^^^^^^^^^^^^^ `Account` redefined here
  |
  = note: `Account` must be defined only once in the type namespace of this module
help: you can use `as` to change the binding name of the import
  |
4 | use crate::state::Account as OtherAccount;
  |                           +++++++++++++++

error[E0432]: unresolved imports `ed25519_dalek::Keypair`, `ed25519_dalek::PublicKey`
 --> src/crypto.rs:2:21
  |
2 | use ed25519_dalek::{Keypair, PublicKey, SecretKey, Signature, Signer, Ver...
  |                     ^^^^^^^  ^^^^^^^^^ no `PublicKey` in the root
  |                     |
  |                     no `Keypair` in the root
  |
  = help: consider importing this struct instead:
          secp256k1::Keypair
  = help: consider importing one of these structs instead:
          secp256k1::PublicKey
          x25519_dalek::PublicKey

error[E0432]: unresolved imports `tracing_subscriber::fmt::time::UtcTime`, `tracing_subscriber::EnvFilter`
   --> src/logging.rs:5:28
    |
5   |     fmt::{format::FmtSpan, time::UtcTime},
    |                            ^^^^^^^^^^^^^ no `UtcTime` in `fmt::time`
6   |     prelude::*,
7   |     EnvFilter,
    |     ^^^^^^^^^ no `EnvFilter` in the root
    |
note: found an item that was configured out
   --> /home/runner/workspace/.local/share/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-subscriber-0.3.19/src/fmt/time/mod.rs:13:21
    |
13  | pub use time_crate::UtcTime;
    |                     ^^^^^^^
note: the item is gated behind the `time` feature
   --> /home/runner/workspace/.local/share/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-subscriber-0.3.19/src/fmt/time/mod.rs:11:7
    |
11  | #[cfg(feature = "time")]
    |       ^^^^^^^^^^^^^^^^
note: found an item that was configured out
   --> /home/runner/workspace/.local/share/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-subscriber-0.3.19/src/lib.rs:234:21
    |
234 |     pub use filter::EnvFilter;
    |                     ^^^^^^^^^
note: the item is gated here
   --> /home/runner/workspace/.local/share/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-subscriber-0.3.19/src/lib.rs:232:1
    |
232 | / feature! {
233 | |     #![all(feature = "env-filter", feature = "std")]
234 | |     pub use filter::EnvFilter;
235 | | }
    | |_^
    = note: this error originates in the macro `feature` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0432]: unresolved import `crate::state::ChainStatus`
  --> src/api.rs:16:29
   |
16 | use crate::state::{Account, ChainStatus};
   |                             ^^^^^^^^^^^
   |                             |
   |                             no `ChainStatus` in `state`
   |                             help: a similar name exists in the module: `ChainState`

error[E0432]: unresolved import `metrics`
  --> src/logging.rs:10:5
   |
10 | use metrics::{counter, gauge, histogram};
   |     ^^^^^^^ help: a similar path exists: `crate::metrics`
   |
   = note: `use` statements changed in Rust 2018; read more at <https://doc.rust-lang.org/edition-guide/rust-2018/module-system/path-clarity.html>

error[E0432]: unresolved import `metrics_exporter_prometheus`
  --> src/logging.rs:11:5
   |
11 | use metrics_exporter_prometheus::PrometheusBuilder;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ use of undeclared crate or module `metrics_exporter_prometheus`

error[E0432]: unresolved import `crate::config::LoggingConfig`
  --> src/logging.rs:13:5
   |
13 | use crate::config::LoggingConfig;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `LoggingConfig` in `config`

error[E0432]: unresolved import `bulletproofs`
  --> src/privacy.rs:15:5
   |
15 | use bulletproofs::{BulletproofGens, PedersenGens, RangeProof};
   |     ^^^^^^^^^^^^ use of undeclared crate or module `bulletproofs`

error[E0432]: unresolved import `merlin`
  --> src/privacy.rs:16:5
   |
16 | use merlin::Transcript;
   |     ^^^^^^ use of undeclared crate or module `merlin`

error[E0432]: unresolved imports `crate::state::ChainInfo`, `crate::state::SyncStatus`
   --> src/lib.rs:156:33
    |
156 | pub use crate::state::{Account, ChainInfo, SyncStatus};
    |                                 ^^^^^^^^^  ^^^^^^^^^^ no `SyncStatus` in `state`
    |                                 |
    |                                 no `ChainInfo` in `state`

error[E0433]: failed to resolve: use of undeclared crate or module `log`
   --> src/oracle.rs:154:21
    |
154 |                     log::warn!("Failed to fetch data from source: {}", e);
    |                     ^^^ use of undeclared crate or module `log`

warning: unused import: `http::StatusCode`
 --> src/api.rs:9:5
  |
9 |     http::StatusCode,
  |     ^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `anyhow::Result`
  --> src/api.rs:12:5
   |
12 | use anyhow::Result;
   |     ^^^^^^^^^^^^^^

warning: unused import: `SecretKey`
 --> src/crypto.rs:2:41
  |
2 | use ed25519_dalek::{Keypair, PublicKey, SecretKey, Signature, Signer, Ver...
  |                                         ^^^^^^^^^

warning: unused import: `Instant`
 --> src/delegation.rs:6:27
  |
6 | use std::time::{Duration, Instant};
  |                           ^^^^^^^

warning: unused imports: `SystemTime` and `UNIX_EPOCH`
 --> src/gas.rs:1:17
  |
1 | use std::time::{SystemTime, UNIX_EPOCH};
  |                 ^^^^^^^^^^  ^^^^^^^^^^

warning: unused import: `crate::state::Account`
 --> src/genesis.rs:4:5
  |
4 | use crate::state::Account;
  |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `HashSet`
 --> src/governance.rs:5:33
  |
5 | use std::collections::{HashMap, HashSet};
  |                                 ^^^^^^^

warning: unused import: `Instant`
 --> src/governance.rs:6:27
  |
6 | use std::time::{Duration, Instant};
  |                           ^^^^^^^

warning: unused imports: `Deserialize` and `Serialize`
  --> src/logging.rs:12:13
   |
12 | use serde::{Serialize, Deserialize};
   |             ^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `Instant`
 --> src/metrics.rs:6:27
  |
6 | use std::time::{Duration, Instant};
  |                           ^^^^^^^

warning: unused import: `tokio::time::sleep`
 --> src/metrics.rs:7:5
  |
7 | use tokio::time::sleep;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused imports: `AtomicF64` and `AtomicU64`
  --> src/metrics.rs:10:24
   |
10 | use prometheus::core::{AtomicF64, AtomicU64};
   |                        ^^^^^^^^^  ^^^^^^^^^

warning: unused import: `prometheus::proto::MetricFamily`
  --> src/metrics.rs:11:5
   |
11 | use prometheus::proto::MetricFamily;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `IpAddr`
 --> src/network.rs:3:16
  |
3 | use std::net::{IpAddr, SocketAddr};
  |                ^^^^^^

warning: unused import: `tokio::time`
 --> src/network.rs:6:5
  |
6 | use tokio::time;
  |     ^^^^^^^^^^^

warning: unused imports: `Block` and `Transaction`
 --> src/network.rs:8:24
  |
8 | use crate::consensus::{Block, Transaction};
  |                        ^^^^^  ^^^^^^^^^^^

warning: unused import: `Instant`
 --> src/oracle.rs:6:27
  |
6 | use std::time::{Duration, Instant};
  |                           ^^^^^^^

warning: unused import: `tokio::time::sleep`
 --> src/oracle.rs:8:5
  |
8 | use tokio::time::sleep;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused imports: `Duration` and `Instant`
 --> src/privacy.rs:6:17
  |
6 | use std::time::{Duration, Instant};
  |                 ^^^^^^^^  ^^^^^^^

warning: unused imports: `Identity`, `IsIdentity`, `RistrettoPoint`, and `constants::RISTRETTO_BASEPOINT_POINT`
  --> src/privacy.rs:10:5
   |
10 |     constants::RISTRETTO_BASEPOINT_POINT,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 |     ristretto::{RistrettoPoint, CompressedRistretto},
   |                 ^^^^^^^^^^^^^^
12 |     scalar::Scalar,
13 |     traits::{Identity, IsIdentity},
   |              ^^^^^^^^  ^^^^^^^^^^

warning: unused import: `SecretKey`
 --> src/security.rs:6:28
  |
6 | use secp256k1::{PublicKey, SecretKey, Message};
  |                            ^^^^^^^^^

warning: unused import: `secp256k1::ecdsa::Signature`
 --> src/security.rs:7:5
  |
7 | use secp256k1::ecdsa::Signature;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Instant`
 --> src/security_audit.rs:6:27
  |
6 | use std::time::{Duration, Instant};
  |                           ^^^^^^^

warning: unused import: `Keccak256`
 --> src/security_audit.rs:8:12
  |
8 | use sha3::{Keccak256, Digest};
  |            ^^^^^^^^^

warning: unused imports: `RngCore` and `rngs::OsRng`
 --> src/security_audit.rs:9:12
  |
9 | use rand::{rngs::OsRng, RngCore};
  |            ^^^^^^^^^^^  ^^^^^^^

warning: unused import: `Duration`
 --> src/smart_contract.rs:6:17
  |
6 | use std::time::{Duration, Instant};
  |                 ^^^^^^^^

warning: unused import: `Keccak256`
 --> src/state.rs:5:20
  |
5 | use sha3::{Digest, Keccak256};
  |                    ^^^^^^^^^

warning: unused import: `hex`
 --> src/state.rs:6:5
  |
6 | use hex;
  |     ^^^

warning: unused import: `Path`
 --> src/storage.rs:6:17
  |
6 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused import: `Instant`
 --> src/storage.rs:7:27
  |
7 | use std::time::{Duration, Instant};
  |                           ^^^^^^^

warning: unused imports: `RngCore` and `rngs::OsRng`
  --> src/storage.rs:10:12
   |
10 | use rand::{rngs::OsRng, RngCore};
   |            ^^^^^^^^^^^  ^^^^^^^

warning: unused import: `futures::StreamExt`
  --> src/storage.rs:13:5
   |
13 | use futures::StreamExt;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused imports: `SystemExt` and `System`
 --> src/thermal.rs:1:15
  |
1 | use sysinfo::{System, SystemExt, ComponentExt};
  |               ^^^^^^  ^^^^^^^^^

warning: unused import: `std::sync::Arc`
 --> src/thermal.rs:2:5
  |
2 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^

warning: unused import: `tokio::sync::Mutex`
 --> src/thermal.rs:3:5
  |
3 | use tokio::sync::Mutex;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused imports: `Duration` and `Instant`
 --> src/token.rs:6:17
  |
6 | use std::time::{Duration, Instant};
  |                 ^^^^^^^^  ^^^^^^^

warning: unused import: `std::str::FromStr`
 --> src/token.rs:8:5
  |
8 | use std::str::FromStr;
  |     ^^^^^^^^^^^^^^^^^

warning: unused imports: `RngCore` and `rngs::OsRng`
 --> src/wallet.rs:8:12
  |
8 | use rand::{rngs::OsRng, RngCore};
  |            ^^^^^^^^^^^  ^^^^^^^

warning: unused import: `KeyPair`
  --> src/wallet.rs:12:36
   |
12 | use crate::crypto::{CryptoManager, KeyPair};
   |                                    ^^^^^^^

error[E0308]: mismatched types
   --> src/lib.rs:113:51
    |
113 |         if !self.chain_state.validate_transaction(&transaction).await? {
    |                              -------------------- ^^^^^^^^^^^^ expected `state::Transaction`, found `Transaction`
    |                              |
    |                              arguments to this method are incorrect
    |
    = note: `Transaction` and `state::Transaction` have similar names, but are actually distinct types
note: `Transaction` is defined in module `crate::consensus` of the current crate
   --> src/consensus.rs:34:1
    |
34  | pub struct Transaction {
    | ^^^^^^^^^^^^^^^^^^^^^^
note: `state::Transaction` is defined in module `crate::state` of the current crate
   --> src/state.rs:34:1
    |
34  | pub struct Transaction {
    | ^^^^^^^^^^^^^^^^^^^^^^
note: method defined here
   --> src/state.rs:140:18
    |
140 | ...ync fn validate_transaction(&self, transaction: &Transaction) -> Res...
    |           ^^^^^^^^^^^^^^^^^^^^        -------------------------

error[E0308]: mismatched types
   --> src/lib.rs:118:50
    |
118 | ...in_state.add_pending_transaction(transaction.clone()).await?;
    |             ----------------------- ^^^^^^^^^^^^^^^^^^^ expected `state::Transaction`, found `Transaction`
    |             |
    |             arguments to this method are incorrect
    |
    = note: `Transaction` and `state::Transaction` have similar names, but are actually distinct types
note: `Transaction` is defined in module `crate::consensus` of the current crate
   --> src/consensus.rs:34:1
    |
34  | pub struct Transaction {
    | ^^^^^^^^^^^^^^^^^^^^^^
note: `state::Transaction` is defined in module `crate::state` of the current crate
   --> src/state.rs:34:1
    |
34  | pub struct Transaction {
    | ^^^^^^^^^^^^^^^^^^^^^^
note: method defined here
   --> src/state.rs:159:18
    |
159 | ...nc fn add_pending_transaction(&self, transaction: Transaction) -> Re...
    |          ^^^^^^^^^^^^^^^^^^^^^^^        ------------------------

error[E0599]: no method named `get_pending_transactions` found for struct `Arc<ChainState>` in the current scope
   --> src/lib.rs:129:53
    |
129 | ...ns = self.chain_state.get_pending_transactions().await?;
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `add_pending_transaction` with a similar name, but with different arguments
   --> src/state.rs:159:5
    |
159 |     pub async fn add_pending_transaction(&self, transaction: Transaction) -> Result<(), StateError...
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `clear_pending_transactions` found for struct `Arc<ChainState>` in the current scope
   --> src/lib.rs:133:30
    |
133 |             self.chain_state.clear_pending_transactions().await?;
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `add_pending_transaction` with a similar name, but with different arguments
   --> src/state.rs:159:5
    |
159 |     pub async fn add_pending_transaction(&self, transaction: Transaction) -> Result<(), StateError...
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `get_status` found for struct `Arc<ChainState>` in the current scope
  --> src/api.rs:94:34
   |
94 |     match state.node.chain_state.get_status().await {
   |                                  ^^^^^^^^^^ method not found in `Arc<ChainState>`

warning: unused variable: `state`
   --> src/api.rs:104:11
    |
104 |     State(state): State<ApiState>,
    |           ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `pagination`
   --> src/api.rs:105:11
    |
105 |     Query(pagination): Query<PaginationQuery>,
    |           ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_pagination`

error[E0599]: no method named `get_block` found for struct `Arc<ChainState>` in the current scope
   --> src/api.rs:115:34
    |
115 |     match state.node.chain_state.get_block(&hash).await {
    |                                  ^^^^^^^^^
    |
help: there is a method `get_balance` with a similar name
    |
115 |     match state.node.chain_state.get_balance(&hash).await {
    |                                  ~~~~~~~~~~~

warning: unused variable: `state`
   --> src/api.rs:126:11
    |
126 |     State(state): State<ApiState>,
    |           ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

warning: unused variable: `pagination`
   --> src/api.rs:127:11
    |
127 |     Query(pagination): Query<PaginationQuery>,
    |           ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_pagination`

error[E0599]: no method named `get_transaction` found for struct `Arc<ChainState>` in the current scope
   --> src/api.rs:137:34
    |
137 |     match state.node.chain_state.get_transaction(&hash).await {
    |                                  ^^^^^^^^^^^^^^^
    |
help: there is a method `apply_transaction` with a similar name
    |
137 |     match state.node.chain_state.apply_transaction(&hash).await {
    |                                  ~~~~~~~~~~~~~~~~~

warning: unused variable: `state`
   --> src/api.rs:148:11
    |
148 |     State(state): State<ApiState>,
    |           ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

error[E0308]: mismatched types
   --> src/api.rs:173:9
    |
172 |     match state.node.chain_state.get_account(&address).await {
    |           -------------------------------------------------- this expression has type `std::option::Option<state::Account>`
173 |         Ok(Some(account)) => Json(ApiResponse::success(account)),
    |         ^^^^^^^^^^^^^^^^^ expected `Option<Account>`, found `Result<_, _>`
    |
    = note: expected enum `std::option::Option<state::Account>`
               found enum `Result<_, _>`

error[E0308]: mismatched types
   --> src/api.rs:174:9
    |
172 |     match state.node.chain_state.get_account(&address).await {
    |           -------------------------------------------------- this expression has type `std::option::Option<state::Account>`
173 |         Ok(Some(account)) => Json(ApiResponse::success(account)),
174 |         Ok(None) => Json(ApiResponse::<Account>::error("Account not fou...
    |         ^^^^^^^^ expected `Option<Account>`, found `Result<_, _>`
    |
    = note: expected enum `std::option::Option<state::Account>`
               found enum `Result<_, _>`

error[E0308]: mismatched types
   --> src/api.rs:175:9
    |
172 |     match state.node.chain_state.get_account(&address).await {
    |           -------------------------------------------------- this expression has type `std::option::Option<state::Account>`
...
175 |         Err(e) => {
    |         ^^^^^^ expected `Option<Account>`, found `Result<_, _>`
    |
    = note: expected enum `std::option::Option<state::Account>`
               found enum `Result<_, _>`

error[E0599]: no method named `get_account_balance` found for struct `Arc<ChainState>` in the current scope
   --> src/api.rs:186:34
    |
186 |     match state.node.chain_state.get_account_balance(&address).await {
    |                                  ^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `get_account` with a similar name
    |
186 |     match state.node.chain_state.get_account(&address).await {
    |                                  ~~~~~~~~~~~

warning: unused variable: `state`
   --> src/api.rs:195:31
    |
195 | ... fn get_validators(State(state): State<ApiState>) -> impl IntoRespon...
    |                             ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

error[E0609]: no field `consensus_manager` on type `Arc<HelixNode>`
   --> src/api.rs:213:32
    |
213 |     let consensus = state.node.consensus_manager.lock().await;
    |                                ^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `config`, `chain_state`, `consensus`, `crypto`, `network`, `is_running`

warning: unused variable: `state`
   --> src/api.rs:223:28
    |
223 | async fn get_metrics(State(state): State<ApiState>) -> impl IntoResponse {
    |                            ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

error[E0599]: no function or associated item named `hash_sha256` found for struct `CryptoManager` in the current scope
   --> src/consensus.rs:136:68
    |
136 | ...crypto::CryptoManager::hash_sha256(block_data.as_bytes()));
    |                           ^^^^^^^^^^^ function or associated item not found in `CryptoManager`
    |
   ::: src/crypto.rs:25:1
    |
25  | pub struct CryptoManager {
    | ------------------------ function or associated item `hash_sha256` not found for this struct
    |
note: if you're trying to build a new `CryptoManager`, consider using `CryptoManager::new` which returns `CryptoManager`
   --> src/crypto.rs:44:5
    |
44  |     pub fn new() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `execute_transactions` found for struct `Arc<ChainState>` in the current scope
   --> src/consensus.rs:160:26
    |
160 |         self.chain_state.execute_transactions(&block.transactions).await?;
    |                          ^^^^^^^^^^^^^^^^^^^^ method not found in `Arc<ChainState>`

error[E0599]: no method named `add_block` found for struct `Arc<ChainState>` in the current scope
   --> src/consensus.rs:163:26
    |
163 |         self.chain_state.add_block(block).await?;
    |                          ^^^^^^^^^ method not found in `Arc<ChainState>`

error[E0599]: no method named `get_pending_transactions` found for struct `Arc<ChainState>` in the current scope
   --> src/consensus.rs:170:40
    |
170 | ...   let pending = self.chain_state.get_pending_transactions().await.u...
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `add_pending_transaction` with a similar name, but with different arguments
   --> src/state.rs:159:5
    |
159 |     pub async fn add_pending_transaction(&self, transaction: Transaction) -> Result<(), StateError...
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> src/consensus.rs:211:54
    |
211 |             if self.chain_state.validate_transaction(&tx).await? {
    |                                 -------------------- ^^^ expected `state::Transaction`, found `Transaction`
    |                                 |
    |                                 arguments to this method are incorrect
    |
    = note: `Transaction` and `state::Transaction` have similar names, but are actually distinct types
note: `Transaction` is defined in module `crate::consensus` of the current crate
   --> src/consensus.rs:34:1
    |
34  | pub struct Transaction {
    | ^^^^^^^^^^^^^^^^^^^^^^
note: `state::Transaction` is defined in module `crate::state` of the current crate
   --> src/state.rs:34:1
    |
34  | pub struct Transaction {
    | ^^^^^^^^^^^^^^^^^^^^^^
note: method defined here
   --> src/state.rs:140:18
    |
140 | ...ync fn validate_transaction(&self, transaction: &Transaction) -> Res...
    |           ^^^^^^^^^^^^^^^^^^^^        -------------------------

error[E0599]: no function or associated item named `hash_sha256` found for struct `CryptoManager` in the current scope
   --> src/consensus.rs:226:73
    |
226 | ...crypto::CryptoManager::hash_sha256(block_data.as_bytes()));
    |                           ^^^^^^^^^^^ function or associated item not found in `CryptoManager`
    |
   ::: src/crypto.rs:25:1
    |
25  | pub struct CryptoManager {
    | ------------------------ function or associated item `hash_sha256` not found for this struct
    |
note: if you're trying to build a new `CryptoManager`, consider using `CryptoManager::new` which returns `CryptoManager`
   --> src/crypto.rs:44:5
    |
44  |     pub fn new() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `get_status` found for struct `Arc<ChainState>` in the current scope
   --> src/consensus.rs:267:39
    |
267 |         let status = self.chain_state.get_status().await?;
    |                                       ^^^^^^^^^^ method not found in `Arc<ChainState>`

error[E0599]: no method named `get_block` found for struct `Arc<ChainState>` in the current scope
   --> src/consensus.rs:269:47
    |
269 | ...   if let Some(block) = self.chain_state.get_block(&status.best_bloc...
    |                                             ^^^^^^^^^
    |
help: there is a method `get_balance` with a similar name
    |
269 |         if let Some(block) = self.chain_state.get_balance(&status.best_block_hash).await? {
    |                                               ~~~~~~~~~~~

error[E0369]: binary operation `!=` cannot be applied to type `ProposalStatus`
   --> src/governance.rs:171:28
    |
171 |         if proposal.status != ProposalStatus::Active {
    |            --------------- ^^ ---------------------- ProposalStatus
    |            |
    |            ProposalStatus
    |
note: an implementation of `PartialEq` might be missing for `ProposalStatus`
   --> src/governance.rs:55:1
    |
55  | pub enum ProposalStatus {
    | ^^^^^^^^^^^^^^^^^^^^^^^ must implement `PartialEq`
help: consider annotating `ProposalStatus` with `#[derive(PartialEq)]`
    |
55  + #[derive(PartialEq)]
56  | pub enum ProposalStatus {
    |

error[E0369]: binary operation `!=` cannot be applied to type `ProposalStatus`
   --> src/governance.rs:217:28
    |
217 |         if proposal.status != ProposalStatus::Passed {
    |            --------------- ^^ ---------------------- ProposalStatus
    |            |
    |            ProposalStatus
    |
note: an implementation of `PartialEq` might be missing for `ProposalStatus`
   --> src/governance.rs:55:1
    |
55  | pub enum ProposalStatus {
    | ^^^^^^^^^^^^^^^^^^^^^^^ must implement `PartialEq`
help: consider annotating `ProposalStatus` with `#[derive(PartialEq)]`
    |
55  + #[derive(PartialEq)]
56  | pub enum ProposalStatus {
    |

error[E0308]: mismatched types
   --> src/governance.rs:242:48
    |
242 |                 self.spend_treasury(recipient, amount, purpose).await?;
    |                      --------------            ^^^^^^ expected `u128`, found `&u128`
    |                      |
    |                      arguments to this method are incorrect
    |
note: method defined here
   --> src/governance.rs:345:14
    |
345 |     async fn spend_treasury(
    |              ^^^^^^^^^^^^^^
...
348 |         amount: u128,
    |         ------------
help: consider dereferencing the borrow
    |
242 |                 self.spend_treasury(recipient, *amount, purpose).await?;
    |                                                +

warning: unused variable: `no_votes`
   --> src/governance.rs:278:25
    |
278 |         let (yes_votes, no_votes, total_votes) = self.calculate_votes(p...
    |                         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_no_votes`

warning: unused variable: `contract_address`
   --> src/governance.rs:319:9
    |
319 |         contract_address: &str,
    |         ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_contract_address`

warning: unused variable: `new_version`
   --> src/governance.rs:320:9
    |
320 |         new_version: &str,
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_version`

warning: unused variable: `upgrade_data`
   --> src/governance.rs:321:9
    |
321 |         upgrade_data: &[u8],
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_upgrade_data`

warning: unused variable: `action_type`
   --> src/governance.rs:329:9
    |
329 |         action_type: &str,
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_action_type`

warning: unused variable: `action_data`
   --> src/governance.rs:330:9
    |
330 |         action_data: &[u8],
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_action_data`

warning: unused variable: `validators`
   --> src/governance.rs:338:9
    |
338 |         validators: &[String],
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_validators`

warning: unused variable: `powers`
   --> src/governance.rs:339:9
    |
339 |         powers: &[u64],
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_powers`

warning: unused variable: `recipient`
   --> src/governance.rs:347:9
    |
347 |         recipient: &str,
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_recipient`

warning: unused variable: `amount`
   --> src/governance.rs:348:9
    |
348 |         amount: u128,
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_amount`

warning: unused variable: `purpose`
   --> src/governance.rs:349:9
    |
349 |         purpose: &str,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_purpose`

error[E0308]: mismatched types
   --> src/metrics.rs:138:21
    |
138 |                     prometheus::opts!(&config.name, &config.description)
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `HistogramOpts`, found `Opts`
    |
    = note: this error originates in the macro `prometheus::opts` (in Nightly builds, run with -Z macro-backtrace for more info)
help: call `Into::into` on this expression to convert `Opts` into `HistogramOpts`
    |
138 |                     prometheus::opts!(&config.name, &config.description).into()
    |                                                                         +++++++

error[E0308]: mismatched types
   --> src/metrics.rs:169:52
    |
169 | ... > config.retention_period {
    |       ^^^^^^^^^^^^^^^^^^^^^^^ expected `TimeDelta`, found `Duration`

warning: unused variable: `duration`
   --> src/metrics.rs:244:84
    |
244 | ...eshold, duration } = &alert.condition {
    |            ^^^^^^^^ help: try ignoring the field: `duration: _`

warning: unused variable: `connection`
   --> src/network.rs:190:21
    |
190 |         if let Some(connection) = self.active_connections.remove(addres...
    |                     ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_connection`

warning: unused variable: `peer`
   --> src/network.rs:131:46
    |
131 | ...d_message_to_peer(&self, peer: &PeerInfo, message: &[u8]) -> Result<...
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_peer`

warning: unused variable: `message`
   --> src/network.rs:131:63
    |
131 | ...(&self, peer: &PeerInfo, message: &[u8]) -> Result<(), String> {
    |                             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_message`

error[E0308]: mismatched types
   --> src/network_manager.rs:248:49
    |
248 |             self.send_message_to_peer(&peer.id, message.clone()).await?;
    |                  --------------------           ^^^^^^^^^^^^^^^ expected `&NetworkMessage`, found `NetworkMessage`
    |                  |
    |                  arguments to this method are incorrect
    |
note: method defined here
   --> src/network_manager.rs:136:14
    |
136 | ...fn send_message_to_peer(&self, peer_id: &str, message: &NetworkMessage) -...
    |       ^^^^^^^^^^^^^^^^^^^^                       ------------------------
help: consider borrowing here
    |
248 |             self.send_message_to_peer(&peer.id, &message.clone()).await?;
    |                                                 +

error[E0308]: mismatched types
   --> src/network_manager.rs:282:52
    |
282 | ...  self.send_message_to_peer(peer_id, NetworkMessage::Pong).await?;
    |           --------------------          ^^^^^^^^^^^^^^^^^^^^ expected `&NetworkMessage`, found `NetworkMessage`
    |           |
    |           arguments to this method are incorrect
    |
note: method defined here
   --> src/network_manager.rs:136:14
    |
136 | ...fn send_message_to_peer(&self, peer_id: &str, message: &NetworkMessage) -...
    |       ^^^^^^^^^^^^^^^^^^^^                       ------------------------
help: consider borrowing here
    |
282 |                 self.send_message_to_peer(peer_id, &NetworkMessage::Pong).await?;
    |                                                    +

warning: unused variable: `request_id`
   --> src/oracle.rs:291:43
    |
291 | ...vrf_calculation(&self, request_id: u64, seed: [u8; 32]) -> Result<()...
    |                           ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_request_id`

warning: unused variable: `seed`
   --> src/oracle.rs:291:60
    |
291 | ...(&self, request_id: u64, seed: [u8; 32]) -> Result<(), OracleError> {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_seed`

error[E0277]: `?` couldn't convert the error to `OracleError`
   --> src/oracle.rs:232:75
    |
232 | ...ce.method.as_bytes())?)
    |                         ^ unsatisfied trait bound
    |
    = help: the trait `From<http::method::InvalidMethod>` is not implemented for `OracleError`
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the trait `FromResidual<Result<Infallible, E>>` is implemented for `Result<T, F>`
    = note: required for `Result<std::string::String, OracleError>` to implement `FromResidual<Result<Infallible, http::method::InvalidMethod>>`

error[E0061]: this method takes 2 arguments but 1 argument was supplied
    --> src/oracle.rs:232:14
     |
232  | ...  .request(reqwest::Method::from_bytes(source.method.as_bytes())?)
     |       ^^^^^^^-------------------------------------------------------- argument #2 is missing
     |
note: method defined here
    --> /home/runner/workspace/.local/share/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/reqwest-0.11.27/src/async_impl/client.rs:1785:12
     |
1785 |     pub fn request<U: IntoUrl>(&self, method: Method, url: U) -> Reque...
     |            ^^^^^^^
help: provide the argument
     |
232  |             .request(reqwest::Method::from_bytes(source.method.as_bytes())?, /* url */)
     |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no method named `url` found for struct `RequestBuilder` in the current scope
   --> src/oracle.rs:233:14
    |
231 |   ...   let response = self.client
    |  ______________________-
232 | | ...       .request(reqwest::Method::from_bytes(source.method.as_bytes...
233 | | ...       .url(&source.url)
    | |           -^^^ method not found in `RequestBuilder`
    | |___________|
    |

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/oracle.rs:239:13
    |
239 |         let data = response.text().await?;
    |             ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/oracle.rs:239:20
    |
239 |         let data = response.text().await?;
    |                    ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/oracle.rs:239:41
    |
239 |         let data = response.text().await?;
    |                                         ^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `Break`
   --> /nix/store/y5k023q95ndaiiw8f5x0krkgdvq54h6c-rust-mixed/lib/rustlib/src/rust/library/core/src/ops/control_flow.rs:86:25
    |
86  | pub enum ControlFlow<B, C = ()> {
    |                         ^^^^^^ required by this bound in `Break`
...
94  |     Break(B),
    |     ----- required by a bound in this variant

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> src/oracle.rs:239:20
    |
239 |         let data = response.text().await?;
    |                    ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
note: required by a bound in `std::ops::ControlFlow::Continue`
   --> /nix/store/y5k023q95ndaiiw8f5x0krkgdvq54h6c-rust-mixed/lib/rustlib/src/rust/library/core/src/ops/control_flow.rs:86:25
    |
86  | pub enum ControlFlow<B, C = ()> {
    |                         ^^^^^^ required by this bound in `ControlFlow::Continue`
...
90  |     Continue(C),
    |     -------- required by a bound in this variant

error[E0277]: `?` couldn't convert the error to `SecurityError`
   --> src/security_audit.rs:237:61
    |
237 |                     return Ok(blacklist.contains(&ip.parse()?));
    |                                                             ^ the trait `From<AddrParseError>` is not implemented for `SecurityError`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `SecurityError` implements `From<serde_json::Error>`
              `SecurityError` implements `From<std::io::Error>`
    = note: required for `Result<bool, SecurityError>` to implement `FromResidual<Result<Infallible, AddrParseError>>`

error[E0277]: `?` couldn't convert the error to `SecurityError`
   --> src/security_audit.rs:242:61
    |
242 |                     return Ok(whitelist.contains(&ip.parse()?));
    |                                                             ^ the trait `From<AddrParseError>` is not implemented for `SecurityError`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `SecurityError` implements `From<serde_json::Error>`
              `SecurityError` implements `From<std::io::Error>`
    = note: required for `Result<bool, SecurityError>` to implement `FromResidual<Result<Infallible, AddrParseError>>`

error[E0277]: `?` couldn't convert the error to `SecurityError`
   --> src/security_audit.rs:268:53
    |
268 |                     self.add_to_blacklist(ip.parse()?).await?;
    |                                                     ^ the trait `From<AddrParseError>` is not implemented for `SecurityError`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `SecurityError` implements `From<serde_json::Error>`
              `SecurityError` implements `From<std::io::Error>`
    = note: required for `Result<(), SecurityError>` to implement `FromResidual<Result<Infallible, AddrParseError>>`

error[E0277]: `?` couldn't convert the error to `SecurityError`
   --> src/security_audit.rs:273:53
    |
273 |                     self.add_to_whitelist(ip.parse()?).await?;
    |                                                     ^ the trait `From<AddrParseError>` is not implemented for `SecurityError`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `SecurityError` implements `From<serde_json::Error>`
              `SecurityError` implements `From<std::io::Error>`
    = note: required for `Result<(), SecurityError>` to implement `FromResidual<Result<Infallible, AddrParseError>>`

error[E0369]: binary operation `==` cannot be applied to type `SecuritySeverity`
   --> src/security_audit.rs:188:67
    |
188 |                 severity.as_ref().map_or(true, |s| event.severity == *s)
    |                                                    -------------- ^^ -- SecuritySeverity
    |                                                    |
    |                                                    SecuritySeverity
    |
note: an implementation of `PartialEq` might be missing for `SecuritySeverity`
   --> src/security_audit.rs:39:1
    |
39  | pub enum SecuritySeverity {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^ must implement `PartialEq`
help: consider annotating `SecuritySeverity` with `#[derive(PartialEq)]`
    |
39  + #[derive(PartialEq)]
40  | pub enum SecuritySeverity {
    |

warning: unused variable: `shard`
   --> src/sharding.rs:137:53
    |
137 | ...te(&self, shard_id: u32, shard: &Shard) -> Result<(), String> {
    |                             ^^^^^ help: if this is intentional, prefix it with an underscore: `_shard`

error[E0599]: no method named `is_ok` found for struct `Vec<u8>` in the current scope
   --> src/smart_contract.rs:109:29
    |
109 |             success: result.is_ok(),
    |                             ^^^^^ method not found in `Vec<u8>`

error[E0599]: no method named `unwrap_or_default` found for struct `Vec<u8>` in the current scope
   --> src/smart_contract.rs:110:33
    |
110 |             return_data: result.unwrap_or_default(),
    |                                 ^^^^^^^^^^^^^^^^^ method not found in `Vec<u8>`

error[E0599]: no method named `err` found for struct `Vec<u8>` in the current scope
   --> src/smart_contract.rs:112:27
    |
112 |             error: result.err().map(|e| e.to_string()),
    |                           ^^^ method not found in `Vec<u8>`

error[E0277]: `?` couldn't convert the error to `StorageError`
  --> src/storage.rs:64:69
   |
64 |         let ipfs_client = IpfsClient::from_str(&config.ipfs_api_url)?;
   |                                                                     ^ the trait `From<http::uri::InvalidUri>` is not implemented for `StorageError`
   |
   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
   = help: the following other types implement trait `From<T>`:
             `StorageError` implements `From<ipfs_api_backend_hyper::Error>`
             `StorageError` implements `From<serde_json::Error>`
             `StorageError` implements `From<std::io::Error>`
   = note: required for `Result<StorageManager, StorageError>` to implement `FromResidual<Result<Infallible, http::uri::InvalidUri>>`

error[E0521]: borrowed data escapes outside of method
   --> src/storage.rs:207:24
    |
206 | ...ync fn upload_to_ipfs(&self, data: &[u8]) -> Result<String, StorageE...
    |                                 ----  - let's call the lifetime of this reference `'1`
    |                                 |
    |                                 `data` is a reference that is only valid in the method body
207 | ...  let response = self.ipfs_client.add(data).await?;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |                     |
    |                     `data` escapes the method body here
    |                     argument requires that `'1` must outlive `'static`

error[E0502]: cannot borrow `data_map` as mutable because it is also borrowed as immutable
   --> src/storage.rs:188:9
    |
176 |         let stored_data = data_map.get(id).ok_or(StorageError::DataNotF...
    |                           -------- immutable borrow occurs here
...
188 |         data_map.remove(id);
    |         ^^^^^^^^ mutable borrow occurs here
...
191 |         self.update_stats(false, stored_data.size, stored_data.is_encry...
    |                                  ---------------- immutable borrow later used here

error[E0277]: `dyn Stream<Item = Result<..., ...>> + Unpin` is not a future
   --> src/storage.rs:212:47
    |
212 |         let data = self.ipfs_client.cat(hash).await?;
    |                                              -^^^^^
    |                                              ||
    |                                              |`dyn Stream<Item = Result<..., ...>> + Unpin` is not a future
    |                                              help: remove the `.await`
    |
    = note: the full name for the type has been written to '/home/runner/workspace/target/debug/deps/helix_chain-4d2ef8e9a83a6479.long-type-2434836664005119160.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = help: the trait `futures::Future` is not implemented for `dyn Stream<Item = Result<..., ...>> + Unpin`
    = note: required for `Box<dyn Stream<Item = ...> + Unpin>` to implement `futures::Future`
    = note: required for `Box<dyn Stream<Item = ...> + Unpin>` to implement `std::future::IntoFuture`
    = note: the full name for the type has been written to '/home/runner/workspace/target/debug/deps/helix_chain-4d2ef8e9a83a6479.long-type-16516253155351359044.txt'
    = note: consider using `--verbose` to print the full type name to the console

warning: unused variable: `base_address`
  --> src/wallet.rs:92:38
   |
92 | ...ecret_key, public_key, base_address) = self.address_generator.generat...
   |                           ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_base_address`

warning: use of deprecated associated function `secp256k1::Message::from_slice`: use from_digest_slice instead
   --> src/wallet.rs:166:32
    |
166 |         let message = Message::from_slice(&tx_hash)?;
    |                                ^^^^^^^^^^
    |
    = note: `#[warn(deprecated)]` on by default

error[E0592]: duplicate definitions with name `start`
   --> src/network_manager.rs:159:5
    |
51  |     pub async fn start(&self) -> Result<()> {
    |     --------------------------------------- other definition for `start`
...
159 |     pub async fn start(&self) -> Result<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `start`

error[E0592]: duplicate definitions with name `stop`
   --> src/network_manager.rs:179:5
    |
72  |     pub async fn stop(&self) -> Result<()> {
    |     -------------------------------------- other definition for `stop`
...
179 |     pub async fn stop(&self) -> Result<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `stop`

error[E0592]: duplicate definitions with name `connect_to_peer`
   --> src/network_manager.rs:197:5
    |
105 |     pub async fn connect_to_peer(&self, address: &str) -> Result<()> {
    |     ---------------------------------------------------------------- other definition for `connect_to_peer`
...
197 |     pub async fn connect_to_peer(&self, address: &str) -> Result<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `connect_to_peer`

error[E0592]: duplicate definitions with name `broadcast_message`
   --> src/network_manager.rs:241:5
    |
122 |     pub async fn broadcast_message(&self, message: NetworkMessage) -> Result<()...
    |     ---------------------------------------------------------------------------- other definition for `broadcast_message`
...
241 |     pub async fn broadcast_message(&self, message: NetworkMessage) -> Result<()...
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `broadcast_message`

error[E0592]: duplicate definitions with name `send_message_to_peer`
   --> src/network_manager.rs:254:5
    |
136 |     async fn send_message_to_peer(&self, peer_id: &str, message: &NetworkMessage) -> Result<()> {
    |     ------------------------------------------------------------------------------------------- other definition for `send_message_to_peer`
...
254 |     pub async fn send_message_to_peer(&self, peer_id: &str, message: NetworkMessage) -> Result<()...
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `send_message_to_peer`

error[E0592]: duplicate definitions with name `start_peer_discovery`
   --> src/network_manager.rs:311:5
    |
80  |     async fn start_peer_discovery(&self) -> Result<()> {
    |     -------------------------------------------------- other definition for `start_peer_discovery`
...
311 |     async fn start_peer_discovery(&self) -> Result<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `start_peer_discovery`

error[E0599]: no function or associated item named `new` found for struct `MerkleTree` in the current scope
   --> src/consensus.rs:262:54
    |
262 |         let merkle_tree = crate::crypto::MerkleTree::new(tx_hashes);
    |                                                      ^^^ function or associated item not found in `MerkleTree`
    |
   ::: src/crypto.rs:37:1
    |
37  | pub struct MerkleTree {
    | --------------------- function or associated item `new` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `new`, perhaps you need to implement one of them:
            candidate #1: `Atomic`
            candidate #2: `Bit`
            candidate #3: `Digest`
            candidate #4: `KeyInit`
            candidate #5: `KeyIvInit`
            candidate #6: `SystemExt`
            candidate #7: `UniformSampler`
            candidate #8: `VariableOutput`
            candidate #9: `VariableOutputCore`
            candidate #10: `VartimePrecomputedMultiscalarMul`
            candidate #11: `ahash::HashMapExt`
            candidate #12: `ahash::HashSetExt`
            candidate #13: `hmac::Mac`
            candidate #14: `parking_lot_core::thread_parker::ThreadParkerT`
            candidate #15: `protobuf::message::Message`
            candidate #16: `rand::distributions::uniform::UniformSampler`
            candidate #17: `ring::aead::BoundKey`

error[E0308]: mismatched types
   --> src/crypto.rs:76:41
    |
76  |         let sig = Signature::from_bytes(&signature.signature)
    |                   --------------------- ^^^^^^^^^^^^^^^^^^^^ expected `&[u8; 64]`, found `&Vec<u8>`
    |                   |
    |                   arguments to this function are incorrect
    |
    = note: expected reference `&[u8; 64]`
               found reference `&Vec<u8>`
note: associated function defined here
   --> /home/runner/workspace/.local/share/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ed25519-2.2.3/src/lib.rs:313:12
    |
313 |     pub fn from_bytes(bytes: &SignatureBytes) -> Self {
    |            ^^^^^^^^^^

error[E0599]: no method named `map_err` found for struct `ed25519_dalek::Signature` in the current scope
  --> src/crypto.rs:77:14
   |
76 |           let sig = Signature::from_bytes(&signature.signature)
   |  ___________________-
77 | |             .map_err(|e| format!("Invalid signature: {}", e))?;
   | |             -^^^^^^^ method not found in `Signature`
   | |_____________|
   |

error[E0277]: `?` couldn't convert the error to `OracleError`
   --> src/oracle.rs:246:73
    |
246 |                 let json: serde_json::Value = serde_json::from_str(data)?;
    |                                                                         ^ the trait `From<serde_json::Error>` is not implemented for `OracleError`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the trait `FromResidual<Result<Infallible, E>>` is implemented for `Result<T, F>`
    = note: required for `Result<std::string::String, OracleError>` to implement `FromResidual<Result<Infallible, serde_json::Error>>`

warning: unused import: `Digest`
 --> src/security_audit.rs:8:23
  |
8 | use sha3::{Keccak256, Digest};
  |                       ^^^^^^

warning: unused import: `Digest`
 --> src/state.rs:5:12
  |
5 | use sha3::{Digest, Keccak256};
  |            ^^^^^^

warning: unused import: `ComponentExt`
 --> src/thermal.rs:1:34
  |
1 | use sysinfo::{System, SystemExt, ComponentExt};
  |                                  ^^^^^^^^^^^^

warning: unused variable: `stake`
   --> src/address.rs:233:58
    |
233 | ...(&self, beta_angle: f64, stake: u64) -> Result<(GearParameters, Addr...
    |                             ^^^^^ help: if this is intentional, prefix it with an underscore: `_stake`

warning: unused variable: `epoch`
   --> src/delegation.rs:293:39
    |
293 |     fn calculate_epoch_rewards(&self, epoch: u64) -> u128 {
    |                                       ^^^^^ help: if this is intentional, prefix it with an underscore: `_epoch`

warning: unused variable: `proof`
   --> src/oracle.rs:296:32
    |
296 | ... verify_vrf_proof(&self, proof: &[u8], seed: &[u8; 32]) -> Result<()...
    |                             ^^^^^ help: if this is intentional, prefix it with an underscore: `_proof`

warning: unused variable: `seed`
   --> src/oracle.rs:296:46
    |
296 | ...oof(&self, proof: &[u8], seed: &[u8; 32]) -> Result<(), OracleError> {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_seed`

warning: unused variable: `words`
   --> src/oracle.rs:301:35
    |
301 | ...rify_random_words(&self, words: &[[u8; 32]], proof: &[u8]) -> Result...
    |                             ^^^^^ help: if this is intentional, prefix it with an underscore: `_words`

warning: unused variable: `proof`
   --> src/oracle.rs:301:55
    |
301 | ...elf, words: &[[u8; 32]], proof: &[u8]) -> Result<(), OracleError> {
    |                             ^^^^^ help: if this is intentional, prefix it with an underscore: `_proof`

warning: unused variable: `signature`
   --> src/oracle.rs:306:32
    |
306 | ...erify_signature(&self, signature: &str, data: &[[u8; 32]]) -> Result...
    |                           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_signature`

warning: unused variable: `data`
   --> src/oracle.rs:306:49
    |
306 | ...(&self, signature: &str, data: &[[u8; 32]]) -> Result<(), OracleErro...
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_data`

error[E0004]: non-exhaustive patterns: `&OracleError::InvalidData`, `&OracleError::Timeout`, `&OracleError::NetworkError(_)` and 8 more not covered
   --> src/oracle.rs:334:10
    |
334 | #[derive(Debug, Error)]
    |          ^^^^^ patterns `&OracleError::InvalidData`, `&OracleError::Timeout`, `&OracleError::NetworkError(_)` and 8 more not covered
    |
note: `OracleError` defined here
   --> src/oracle.rs:335:10
    |
335 | pub enum OracleError {
    |          ^^^^^^^^^^^
...
361 |     InvalidData,
    |     ----------- not covered
362 |     #[error("Timeout")]
363 |     Timeout,
    |     ------- not covered
...
375 |     NetworkError(String),
    |     ------------ not covered
376 |     #[error("Invalid data format")]
377 |     InvalidData,
    |     ----------- not covered
378 |     #[error("Data parsing error: {0}")]
379 |     DataError(String),
    |     --------- not covered
    = note: the matched value is of type `&OracleError`
    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0004]: non-exhaustive patterns: `&OracleError::InvalidData`, `&OracleError::Timeout`, `&OracleError::NetworkError(_)` and 8 more not covered
   --> src/oracle.rs:334:17
    |
334 | #[derive(Debug, Error)]
    |                 ^^^^^ patterns `&OracleError::InvalidData`, `&OracleError::Timeout`, `&OracleError::NetworkError(_)` and 8 more not covered
    |
note: `OracleError` defined here
   --> src/oracle.rs:335:10
    |
335 | pub enum OracleError {
    |          ^^^^^^^^^^^
...
361 |     InvalidData,
    |     ----------- not covered
362 |     #[error("Timeout")]
363 |     Timeout,
    |     ------- not covered
...
375 |     NetworkError(String),
    |     ------------ not covered
376 |     #[error("Invalid data format")]
377 |     InvalidData,
    |     ----------- not covered
378 |     #[error("Data parsing error: {0}")]
379 |     DataError(String),
    |     --------- not covered
    = note: the matched value is of type `&OracleError`
    = note: this error originates in the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `key_image`
   --> src/privacy.rs:267:9
    |
267 |         key_image: &CompressedRistretto,
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_key_image`

warning: unused variable: `public_keys`
   --> src/privacy.rs:268:9
    |
268 |         public_keys: &[CompressedRistretto],
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_public_keys`

warning: unused variable: `signature`
   --> src/privacy.rs:287:37
    |
287 | ..._ring_signature(&self, signature: &RingSignature) -> Result<bool, Pr...
    |                           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_signature`

warning: unused variable: `proof`
   --> src/privacy.rs:325:31
    |
325 | ...n verify_zk_proof(&self, proof: &ZeroKnowledgeProof) -> Result<bool,...
    |                             ^^^^^ help: if this is intentional, prefix it with an underscore: `_proof`

warning: unused variable: `nullifier`
   --> src/privacy.rs:330:32
    |
330 | ...erify_nullifier(&self, nullifier: &[u8]) -> Result<bool, PrivacyErro...
    |                           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_nullifier`

warning: unused variable: `public_key`
   --> src/security.rs:196:13
    |
196 |         let public_key = match self.public_keys.get(&transaction.from) {
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_public_key`

warning: unused variable: `message`
   --> src/security.rs:204:13
    |
204 |         let message = Message::from_digest_slice(&message_hash).map_err...
    |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_message`

warning: unused variable: `merkle_root`
   --> src/security.rs:231:13
    |
231 |         let merkle_root = match self.merkle_roots.get(&transaction.from) {
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_merkle_root`

warning: unused variable: `shard_id`
   --> src/sharding.rs:196:30
    |
196 |     fn get_shard_info(&self, shard_id: u32) -> Option<Shard> {
    |                              ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_shard_id`

warning: unused variable: `shard_id`
   --> src/sharding.rs:201:38
    |
201 | ...shard_state(&mut self, shard_id: u32, new_state: String) -> Result<(...
    |                           ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_shard_id`

warning: unused variable: `new_state`
   --> src/sharding.rs:201:53
    |
201 | ...t self, shard_id: u32, new_state: String) -> Result<(), String> {
    |                           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_state`

warning: unused variable: `transaction`
   --> src/sharding.rs:206:48
    |
206 | ...ard_transaction(&self, transaction: &Transaction) -> bool {
    |                           ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_transaction`

Some errors have detailed explanations: E0004, E0061, E0255, E0277, E0308, E0369, E0428, E0432, E0433...
For more information about an error, try `rustc --explain E0004`.
warning: `helix-chain` (lib) generated 89 warnings
error: could not compile `helix-chain` (lib) due to 80 previous errors; 89 warnings emitted